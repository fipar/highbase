#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4.1 on Fri Oct 13 16:47:20 2006

import wx
import os

# get lang

lang = os.environ['lang']

class ConfiguratorFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ConfiguratorFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.L_CLUSTER_IP = wx.StaticText(self, -1, "CLUSTER_IP")
        self.TextCtrl_CLUSTER_IP = wx.TextCtrl(self, -1, "")
        self.L_SSH_PATIENCE = wx.StaticText(self, -1, "SSH_PATIENCE")
        self.TextCtrl_SSH_PATIENCE = wx.TextCtrl(self, -1, "20")
        self.L_CLUSTER_NETMASK = wx.StaticText(self, -1, "CLUSTER_NETMASK")
        self.TextCtrl_CLUSTER_NETMASK = wx.TextCtrl(self, -1, "")
        self.L_MONITOR_PATIENCE = wx.StaticText(self, -1, "MONITOR_PATIENCE")
        self.TextCtrl_MONITOR_PATIENCE = wx.TextCtrl(self, -1, "10")
        self.L_CLUSTER_BROADCAST = wx.StaticText(self, -1, "CLUSTER_BROADCAST")
        self.TextCtrl_CLUSTER_BROADCAST = wx.TextCtrl(self, -1, "")
        self.L_MONITOR_CHK_THRESHOLD = wx.StaticText(self, -1, "MONITOR_CHK_THRESHOLD")
        self.TextCtrl_MONITOR_CHK_THRESHOLD = wx.TextCtrl(self, -1, "20")
        self.L_CLUSTER_DEVICE = wx.StaticText(self, -1, "CLUSTER_DEVICE")
        self.TextCtrl_CLUSTER_DEVICE = wx.TextCtrl(self, -1, "")
        self.L_MYSQL_KILL_WAIT = wx.StaticText(self, -1, "MYSQL_KILL_WAIT")
        self.TextCtrl_MYSQL_KILL_WAIT = wx.TextCtrl(self, -1, "5")
        self.L_MYSQL_USER = wx.StaticText(self, -1, "MYSQL_USER")
        self.TextCtrl_MYSQL_USER = wx.TextCtrl(self, -1, "ANONYMOUS")
        self.L_MYSQL_RESTART_WAIT = wx.StaticText(self, -1, "MYSQL_RESTART_WAIT")
        self.TextCtrl_MYSQL_RESTART_WAIT = wx.TextCtrl(self, -1, "5")
        self.L_MYSQL_PASSWORD = wx.StaticText(self, -1, "MYSQL_PASSWORD")
        self.TextCtrl_MYSQL_PASSWORD = wx.TextCtrl(self, -1, "EMPTY")
        self.L_FPING_ATTEMPTS = wx.StaticText(self, -1, "FPING_ATTEMPTS")
        self.TextCtrl_FPING_ATTEMPTS = wx.TextCtrl(self, -1, "3")
        self.L_REPLICATION_USER = wx.StaticText(self, -1, "REPLICATION_USER")
        self.TextCtrl_REPLICATION_USER = wx.TextCtrl(self, -1, "replicator")
        self.L_SLAVE = wx.StaticText(self, -1, "SLAVE")
        self.TextCtrl_SLAVE = wx.TextCtrl(self, -1, "mysql-slave")
        self.L_REPLICATION_PASSWORD = wx.StaticText(self, -1, "REPLICATION_PASSWORD")
        self.TextCtrl_REPLICATION_PASSWORD = wx.TextCtrl(self, -1, "replicatorpwd")
        self.L_SIG_KILL_WAIT = wx.StaticText(self, -1, "SIG_KILL_WAIT")
        self.TextCtrl_SIG_KILL_WAIT = wx.TextCtrl(self, -1, "5")
        self.L_MYSQL_DATABASE = wx.StaticText(self, -1, "MYSQL_DATABASE")
        self.TextCtrl_MYSQL_DATABASE = wx.TextCtrl(self, -1, "")
        self.L_DB_USER = wx.StaticText(self, -1, "DB_USER")
        self.TextCtrl_DB_USER = wx.TextCtrl(self, -1, "root")
        self.L_ARP_DELAY = wx.StaticText(self, -1, "ARP_DELAY")
        self.TextCtrl_ARP_DELAY = wx.TextCtrl(self, -1, "5")
        self.L_DB_PASSWORD = wx.StaticText(self, -1, "DB_PASSWORD")
        self.TextCtrl_DB_PASSWORD = wx.TextCtrl(self, -1, "rootpwd")
        self.L_MASTER_SLEEP_TIME = wx.StaticText(self, -1, "MASTER_SLEEP_TIME")
        self.TextCtrl_MASTER_SLEEP_TIME = wx.TextCtrl(self, -1, "60")
        self.L_NOTIFY_EMAIL = wx.StaticText(self, -1, "NOTIFY_EMAIL")
        self.TextCtrl_NOTIFY_EMAIL = wx.TextCtrl(self, -1, "root@localhost")
        self.L_SLAVE_SLEEP_TIME = wx.StaticText(self, -1, "SLAVE_SLEEP_TIME")
        self.TextCtrl_SLAVE_SLEEP_TIME = wx.TextCtrl(self, -1, "60")
        self.SaveConfiguration = wx.Button(self, -1, "Save Configuration")
        self.Cancel = wx.Button(self, -1, "Cancel")
        self.isMaster = wx.CheckBox(self, -1, "This is the master node")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.SaveConfigurationEvent, self.SaveConfiguration)
        self.Bind(wx.EVT_BUTTON, self.CancelEvent, self.Cancel)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ConfiguratorFrame.__set_properties
        self.SetTitle("mysql-ha configuration menu")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("ha.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((800, 600))
        self.TextCtrl_CLUSTER_IP.SetMinSize((180, 25))
	tooltip = open("msg/"+lang+"/CLUSTER_IP")
        self.TextCtrl_CLUSTER_IP.SetToolTipString(tooltip.read())
	tooltip.close()
        self.TextCtrl_SSH_PATIENCE.SetMinSize((180, 25))
	tooltip = open("msg/"+lang+"/SSH_PATIENCE")
        self.TextCtrl_SSH_PATIENCE.SetToolTipString(tooltip.read())
        self.TextCtrl_CLUSTER_NETMASK.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/CLUSTER_NETMASK")
        self.TextCtrl_CLUSTER_NETMASK.SetToolTipString(tooltip.read())
        self.TextCtrl_MONITOR_PATIENCE.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/MONITOR_PATIENCE")
        self.TextCtrl_MONITOR_PATIENCE.SetToolTipString(tooltip.read())
        self.TextCtrl_CLUSTER_BROADCAST.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/CLUSTER_BROADCAST")
        self.TextCtrl_CLUSTER_BROADCAST.SetToolTipString(tooltip.read())
        self.TextCtrl_MONITOR_CHK_THRESHOLD.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/MONITOR_CHK_THRESHOLD")
        self.TextCtrl_MONITOR_CHK_THRESHOLD.SetToolTipString(tooltip.read())
        self.TextCtrl_CLUSTER_DEVICE.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/CLUSTER_DEVICE")
        self.TextCtrl_CLUSTER_DEVICE.SetToolTipString(tooltip.read())
        self.TextCtrl_MYSQL_KILL_WAIT.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/MYSQL_KILL_WAIT")
        self.TextCtrl_MYSQL_KILL_WAIT.SetToolTipString(tooltip.read())
        self.TextCtrl_MYSQL_USER.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/MYSQL_USER")
        self.TextCtrl_MYSQL_USER.SetToolTipString(tooltip.read())
        self.TextCtrl_MYSQL_RESTART_WAIT.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/MYSQL_RESTART_WAIT")
        self.TextCtrl_MYSQL_RESTART_WAIT.SetToolTipString(tooltip.read())
        self.TextCtrl_MYSQL_PASSWORD.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/MYSQL_PASSWORD")
        self.TextCtrl_MYSQL_PASSWORD.SetToolTipString(tooltip.read())
        self.TextCtrl_FPING_ATTEMPTS.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/FPING_ATTEMPTS")
        self.TextCtrl_FPING_ATTEMPTS.SetToolTipString(tooltip.read())
        self.TextCtrl_REPLICATION_USER.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/REPLICATION_USER")
        self.TextCtrl_REPLICATION_USER.SetToolTipString(tooltip.read())
        self.TextCtrl_SLAVE.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/SLAVE")
        self.TextCtrl_SLAVE.SetToolTipString(tooltip.read())
        self.TextCtrl_REPLICATION_PASSWORD.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/REPLICATION_PASSWORD")
        self.TextCtrl_REPLICATION_PASSWORD.SetToolTipString(tooltip.read())
        self.TextCtrl_SIG_KILL_WAIT.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/SIG_KILL_WAIT")
        self.TextCtrl_SIG_KILL_WAIT.SetToolTipString(tooltip.read())
        self.TextCtrl_MYSQL_DATABASE.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/MYSQL_DATABASE")
        self.TextCtrl_MYSQL_DATABASE.SetToolTipString(tooltip.read())
        self.TextCtrl_DB_USER.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/DB_USER")
        self.TextCtrl_DB_USER.SetToolTipString(tooltip.read())
        self.TextCtrl_ARP_DELAY.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/ARP_DELAY")
        self.TextCtrl_ARP_DELAY.SetToolTipString(tooltip.read())
        self.TextCtrl_DB_PASSWORD.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/DB_PASSWORD")
        self.TextCtrl_DB_PASSWORD.SetToolTipString(tooltip.read())
        self.TextCtrl_MASTER_SLEEP_TIME.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/MASTER_SLEEP_TIME")
        self.TextCtrl_MASTER_SLEEP_TIME.SetToolTipString(tooltip.read())
        self.TextCtrl_NOTIFY_EMAIL.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/NOTIFY_EMAIL")
        self.TextCtrl_NOTIFY_EMAIL.SetToolTipString(tooltip.read())
        self.TextCtrl_SLAVE_SLEEP_TIME.SetMinSize((180, 25))
	tooltip.close()
	tooltip = open("msg/"+lang+"/SLAVE_SLEEP_TIME")
        self.TextCtrl_SLAVE_SLEEP_TIME.SetToolTipString(tooltip.read())
        self.SaveConfiguration.SetMinSize((123, 26))
	tooltip.close()
        self.SaveConfiguration.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.SaveConfiguration.SetToolTipString("Writes configuration to /etc/mysql-ha (tooltip not internationalized yet)")
        self.SaveConfiguration.SetDefault()
        self.Cancel.SetMinSize((85, 26))
        self.Cancel.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.Cancel.SetToolTipString("Exit without changes (tooltip not internationalized yet)")
        self.isMaster.SetToolTipString("Check this box if this is the mater node (toltip not internationalized yet)")
        self.isMaster.SetValue(1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ConfiguratorFrame.__do_layout
        grid_sizer_1 = wx.GridSizer(12, 4, 0, 0)
        grid_sizer_3 = wx.GridSizer(2, 1, 0, 0)
        grid_sizer_2 = wx.GridSizer(2, 1, 0, 0)
        grid_sizer_1.Add(self.L_CLUSTER_IP, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_CLUSTER_IP, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_SSH_PATIENCE, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_SSH_PATIENCE, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_CLUSTER_NETMASK, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_CLUSTER_NETMASK, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_MONITOR_PATIENCE, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_MONITOR_PATIENCE, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_CLUSTER_BROADCAST, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_CLUSTER_BROADCAST, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_MONITOR_CHK_THRESHOLD, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_MONITOR_CHK_THRESHOLD, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_CLUSTER_DEVICE, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_CLUSTER_DEVICE, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_MYSQL_KILL_WAIT, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_MYSQL_KILL_WAIT, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_MYSQL_USER, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_MYSQL_USER, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_MYSQL_RESTART_WAIT, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_MYSQL_RESTART_WAIT, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_MYSQL_PASSWORD, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_MYSQL_PASSWORD, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_FPING_ATTEMPTS, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_FPING_ATTEMPTS, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_REPLICATION_USER, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_REPLICATION_USER, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_SLAVE, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_SLAVE, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_REPLICATION_PASSWORD, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_REPLICATION_PASSWORD, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_SIG_KILL_WAIT, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_SIG_KILL_WAIT, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_MYSQL_DATABASE, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_MYSQL_DATABASE, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_DB_USER, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_DB_USER, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_ARP_DELAY, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_ARP_DELAY, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_DB_PASSWORD, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_DB_PASSWORD, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_MASTER_SLEEP_TIME, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_MASTER_SLEEP_TIME, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_NOTIFY_EMAIL, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_NOTIFY_EMAIL, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.L_SLAVE_SLEEP_TIME, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(self.TextCtrl_SLAVE_SLEEP_TIME, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.SaveConfiguration, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_2.Add(self.Cancel, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND|wx.ALIGN_BOTTOM, 0)
        grid_sizer_3.Add(self.isMaster, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(grid_sizer_1)
        self.Layout()
        # end wxGlade

    def SaveConfigurationEvent(self, event): # wxGlade: ConfiguratorFrame.<event_handler>
	configuration = open('/etc/mysql-ha.conf','w')
	
	configuration.write("CLUSTER_IP = "+self.TextCtrl_CLUSTER_IP.GetLineText(0)+"\n")
	configuration.write("CLUSTER_NETMASK = "+self.TextCtrl_CLUSTER_NETMASK.GetLineText(0)+"\n")	
	configuration.write("CLUSTER_BROADCAST = "+self.TextCtrl_CLUSTER_BROADCAST.GetLineText(0)+"\n")
	configuration.write("CLUSTER_DEVICE = "+self.TextCtrl_CLUSTER_DEVICE.GetLineText(0)+"\n")
	
	configuration.write("SSH_PATIENCE = "+self.TextCtrl_SSH_PATIENCE.GetLineText(0)+"\n")
	configuration.write("MONITOR_PATIENCE = "+self.TextCtrl_MONITOR_PATIENCE.GetLineText(0)+"\n")
	configuration.write("MONITOR_CHK_THRESHOLD = "+self.TextCtrl_MONITOR_CHK_THRESHOLD.GetLineText(0)+"\n")
	configuration.write("MYSQL_KILL_WAIT = "+self.TextCtrl_MYSQL_KILL_WAIT.GetLineText(0)+"\n")
	configuration.write("MYSQL_RESTART_WAIT = "+self.TextCtrl_MYSQL_RESTART_WAIT.GetLineText(0)+"\n")
	configuration.write("FPING_ATTEMPTS = "+self.TextCtrl_FPING_ATTEMPTS.GetLineText(0)+"\n")
	configuration.write("SIG_KILL_WAIT = "+self.TextCtrl_SIG_KILL_WAIT.GetLineText(0)+"\n")
	configuration.write("ARP_DELAY = "+self.TextCtrl_ARP_DELAY.GetLineText(0)+"\n")
	configuration.write("MASTER_SLEEP_TIME = "+self.TextCtrl_MASTER_SLEEP_TIME.GetLineText(0)+"\n")
	configuration.write("SLAVE_SLEEP_TIME = "+self.TextCtrl_SLAVE_SLEEP_TIME.GetLineText(0)+"\n")

	configuration.write("MYSQL_USER = "+self.TextCtrl_MYSQL_USER.GetLineText(0)+"\n")
	configuration.write("MYSQL_PASSWORD = "+self.TextCtrl_MYSQL_PASSWORD.GetLineText(0)+"\n")
	configuration.write("REPLICATION_USER = "+self.TextCtrl_REPLICATION_USER.GetLineText(0)+"\n")
	configuration.write("REPLICATION_PASSWORD = "+self.TextCtrl_REPLICATION_PASSWORD.GetLineText(0)+"\n")
	configuration.write("SLAVE = "+self.TextCtrl_SLAVE.GetLineText(0)+"\n")
	configuration.write("DB_USER = "+self.TextCtrl_DB_USER.GetLineText(0)+"\n")
	configuration.write("DB_PASSWORD = "+self.TextCtrl_DB_PASSWORD.GetLineText(0)+"\n")
	configuration.write("NOTIFY_EMAIL = "+self.TextCtrl_NOTIFY_EMAIL.GetLineText(0)+"\n")
	
	if self.isMaster.GetValue():
		os.system("./configuration-post.sh master")
	else:
		os.system("./configuration-post.sh slave")

	configuration.close()
	self.Close()

    def CancelEvent(self, event): # wxGlade: ConfiguratorFrame.<event_handler>
	print self.isMaster.GetValue()
	self.Close()

# end of class ConfiguratorFrame


class Configurator(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = ConfiguratorFrame(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1

# end of class Configurator

if __name__ == "__main__":
    Configurator = Configurator(0)
    Configurator.MainLoop()
