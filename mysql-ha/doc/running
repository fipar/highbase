to run this beta version youll need: 

- perl
- perl : DBD : MySQL
- gcc
- gnu make
- bash >=2
- mysql with replication configured for one master and one slave (http://www.mysql.com/doc)

as root: 

untar the release at /usr and cd to the mysql-ha dir just
created. 
cd extern
cd fping*
./configure && make && make check && make install && make clean
cd ../fake*
make patch && make && make install
cd ..
cp mysql.monitor <some-dir-in-your-path>
cd ..
./configuration-menu.sh (some defaults are too big and will make the
takeover last forever, i will fix this for the next release)
./setup_fake.sh
now you can run ./configurator.sh, interactively, to test it, 
or nohup /usr/mysql-ha/configurator.sh

! ! ! ! ! ! ! THIS SOFTWARE IS NOT YET INTENDED FOR PRODUCTION USE ! ! ! ! ! !
if you do want to use it on a production environment, please test it on your
development/testing environment and report any bug or ill behaviour you might
find. if you want to modify some code and send in a patch, feel free to do so. 
if a community builds around this project, it will evolve faster and we
will have a producton-stable product soon. 

___ SSH CONFIGURATION __ (IMPORTANT)

for mysql-ha to work, you must configure ssh to work in passwordless
mode on both master and slave nodes, at least (and probably at most)
between the two of them. 
so far, the cluster uses the root account (this could change in the future), 
so here are instructions on how to do this using public/private keys. 
you can also change the code to use telnet and use the rhosts file, but
i seriously discourage doing this.

that said, you probably aren't running this on a production system anyway, so 
you might aswell use telnet if you feel more comfortable with it. 

on both nodes, run this as root: 
ssh-keygen -t dsa
when asked for a file, use the provided default
when asked for a passphrase, leave empty

append the generated /root/.ssh/id_dsa.pub file to the
/root/.ssh/authorized_keys2 (might not exist yet) file on the
other host. 

you're ready to go now, try this by logging in as root from 
each machine into the other one. do this at least one
if you've set up a dedicated testing environment for this
cluster, since you will be asked for a confirmation to add
the other host public key to your ring the first time
you use ssh. 

after that, try this again and you should be on the other
host with no password prompts at all. 

